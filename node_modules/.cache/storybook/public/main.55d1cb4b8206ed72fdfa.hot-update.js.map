{"version":3,"file":"main.55d1cb4b8206ed72fdfa.hot-update.js","sources":["webpack:///./src/components/Modal.jsx","webpack:///./src/stories/modal.stories.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled, { keyframes } from \"styled-components\";\n\nconst opacity = keyframes`\n  from {\n    opacity: 0\n  }\n  to {\n    opacity: 1\n  }\n`\n\nconst CONTAINER = styled.div`\n  position: fixed;\n  z-index: 1;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  background-color: rgba(0, 0, 0, 0.75);\n  animation: ${opacity} ${props => props.fadeDuration}ms both;\n  ${(props) => props.customStyle}\n`\n\nconst CONTENT = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  row-gap: 20px;\n  margin: 200px auto;\n  max-width: 500px;\n  background: #343959;\n  padding: 15px;\n  align-items: center;\n  border-radius: 5px;\n  animation: ${opacity} ${props => props.fadeDuration}ms ${props => props.fadeDelay}ms both;\n  ${(props) => props.customStyle}\n`\n\nconst BUTTON = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #F2BA52;\n  color: #FFFF;\n  width: 100px;\n  padding: 5px;\n  border-radius: 5px;\n  ${(props) => props.customStyle}\n`\n\nconst BUTTONX = styled.button`\n  position: absolute;\n  top: -15px;\n  right: -15px;\n  font-size: 1rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  font-weight: bold;\n  background: #FFFF;\n  color:#024199;\n  border: none;\n  width: 30px;\n  height: 30px;\n  border-radius: 300px;\n  ${(props) => props.customStyle}\n`\n\n/**\n* @param {object} props - Props\n* @param {string} buttonContent - To customize the button content\n* @param {function} close - Action when closing\n* @param {boolean} escape - To close the modal by pressing `ESC`\n* @param {number} fadeDelay - Point during the overlay's fade-in that the modal begins to fade in (number between 0 and 1)\n* @param {number} fadeDuration - Number of milliseconds the fade transition takes (null means no transition)\n* @param {string} modalContent - To customize the modal content\n* @param {boolean} open - To open the modal\n* @param {boolean} outside - To close the modal by clicking the overlay\n* @param {boolean} showClose - To activate button x\n* @param {object} styleButton - To customize button style\n* @param {object} styleButtonX - To customize button x style\n* @param {object} styleContainer - To customize overlay style\n* @param {object} styleContent - To customize modal content style\n* @returns {component} - Modal\n*/\n\nfunction Modal ({buttonContent, close, escape, fadeDelay, fadeDuration, modalContent, open, outside, showClose, styleButton, styleButtonX, styleContainer, styleContent}) {\n  if (!open) {\n    return null\n  }\n\n  useEffect(() => {\n    if (open && escape) {\n      window.addEventListener(\"keydown\", (e) => {\n        if (e.key === \"Escape\") {\n          close()\n          window.removeEventListener(\"keydown\", close())\n        }\n      })\n    }\n  }, [open])\n\n  const outsideModal = (e) => {\n    outside && e.target.id === \"container\" && close()\n  }\n\n  return (\n    <CONTAINER\n      id = \"container\"\n      onClick = {(e) => outsideModal(e)}\n      customStyle = {styleContainer}\n      fadeDuration = {fadeDuration}\n    >\n      <CONTENT\n        id = \"content\"\n        fadeDuration = {fadeDuration-fadeDuration*fadeDelay}\n        fadeDelay = {fadeDelay*fadeDuration}\n        customStyle = {styleContent}\n      >\n        {modalContent}\n        <BUTTON\n          onClick = {close}\n          customStyle = {styleButton}\n        >\n          {buttonContent}\n        </BUTTON>\n        {showClose && <BUTTONX onClick = {close} customStyle = {styleButtonX}>x</BUTTONX>}\n      </CONTENT>\n    </CONTAINER>\n  )\n}\n\nModal.propTypes = {\n  buttonContent: PropTypes.string,\n  close: PropTypes.func.isRequired,\n  escape: PropTypes.bool,\n  fadeDelay: PropTypes.number,\n  fadeDuration: PropTypes.number,\n  modalContent: PropTypes.string,\n  open: PropTypes.bool.isRequired,\n  outside: PropTypes.bool,\n  showClose: PropTypes.bool,\n  styleButton: PropTypes.object,\n  styleButtonX: PropTypes.object,\n  styleContainer: PropTypes.object,\n  styleContent: PropTypes.object\n}\n\nModal.defaultProps = {\n  buttonContent: \"Close\",\n  escape: true,\n  fadeDelay: null,\n  fadeDuration: null,\n  modalContent: \"React modal is open!\",\n  open: false,\n  outside: true,\n  showClose: false,\n  styleButton: {},\n  styleButtonX: {},\n  styleContainer: {},\n  styleContent: {}\n}\n\nexport default Modal;","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { useState, Fragment } from \\\"react\\\"\\nimport { storiesOf } from \\\"@storybook/react\\\"\\n\\nimport Modal from \\\"../components/Modal\\\";\\n\\nconst stories = storiesOf(\\\"Example\\\", module);\\n\\nstories.add(\\\"Ex1\\\", () => {\\n    const [active, setActive] = useState(false)\\n\\n    const close = () => {\\n      setActive(!active)\\n    }\\n  \\n    return (\\n      <Fragment>\\n        <div className = \\\"container\\\">\\n          <h1>React Modal</h1>\\n          <h2>By default</h2>\\n          <button onClick = {() => setActive(true)}>Open</button>\\n          <Modal\\n              close = {close}\\n              open = {active}\\n          />\\n        </div>\\n      </Fragment>\\n  \\n    )\\n});\\n\\nstories.add(\\\"Ex2\\\", () => {\\n  const [active, setActive] = useState(false)\\n\\n  const close = () => {\\n    setActive(!active)\\n  }\\n\\n  const customButton = {\\n    display: \\\"none\\\"\\n  }\\n\\n  return (\\n    <Fragment>\\n      <div className = \\\"container\\\">\\n        <h2>With close button only (showClose = true)</h2>\\n        <button onClick = {() => setActive(true)}>Open</button>\\n        <Modal\\n            close = {close}\\n            escape = {false}\\n            open = {active}\\n            outside = {false}\\n            showClose = {true}\\n            styleButton = {customButton}\\n        />\\n      </div>\\n    </Fragment>\\n  )\\n});\\n\\nstories.add(\\\"Ex3\\\", () => {\\n  const [active, setActive] = useState(false)\\n\\n  const close = () => {\\n    setActive(!active)\\n  }\\n\\n  const customContent = {\\n    background: \\\"#212E53\\\",\\n    color: \\\"#FFF\\\",\\n    borderRadius: \\\"0\\\"\\n  }\\n\\n  const customButton = {\\n    fontSize: \\\"1rem\\\",\\n    cursor: \\\"pointer\\\",\\n    fontWeight: \\\"bold\\\",\\n    background: \\\"#EBACA2\\\",\\n    \\n    width: \\\"12rem\\\",\\n    padding: \\\"1rem\\\",\\n    borderRadius: \\\".3rem\\\"\\n  }\\n\\n  return (\\n    <Fragment>\\n      <div className = \\\"container\\\">\\n        <h1>React Modal</h1>\\n        <h2>Modal customized</h2>\\n        <button onClick = {() => setActive(true)}>Open</button>\\n        <Modal\\n            buttonContent = \\\"Example button\\\"\\n            close = {close}\\n            modalContent = \\\"Example 3\\\"\\n            open = {active}\\n            styleButton = {customButton}\\n            styleContent = {customContent}\\n        />\\n      </div>\\n    </Fragment>\\n\\n  )\\n});\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"ex1\":{\"startLoc\":{\"col\":12,\"line\":9},\"endLoc\":{\"col\":1,\"line\":30},\"startBody\":{\"col\":19,\"line\":9},\"endBody\":{\"col\":1,\"line\":30}},\"ex2\":{\"startLoc\":{\"col\":12,\"line\":32},\"endLoc\":{\"col\":1,\"line\":59},\"startBody\":{\"col\":19,\"line\":32},\"endBody\":{\"col\":1,\"line\":59}},\"ex3\":{\"startLoc\":{\"col\":12,\"line\":61},\"endLoc\":{\"col\":1,\"line\":103},\"startBody\":{\"col\":19,\"line\":61},\"endBody\":{\"col\":1,\"line\":103}}};\n    \nimport React from \"react\";\nimport { useState, Fragment } from \"react\"\nimport { storiesOf } from \"@storybook/react\"\n\nimport Modal from \"../components/Modal\";\n\nconst stories = storiesOf(\"Example\", module).addParameters({ storySource: { source: __STORY__, locationsMap: __LOCATIONS_MAP__ } });\n\nstories.add(\"Ex1\", () => {\n    const [active, setActive] = useState(false)\n\n    const close = () => {\n      setActive(!active)\n    }\n  \n    return (\n      <Fragment>\n        <div className = \"container\">\n          <h1>React Modal</h1>\n          <h2>By default</h2>\n          <button onClick = {() => setActive(true)}>Open</button>\n          <Modal\n              close = {close}\n              open = {active}\n          />\n        </div>\n      </Fragment>\n  \n    )\n});\n\nstories.add(\"Ex2\", () => {\n  const [active, setActive] = useState(false)\n\n  const close = () => {\n    setActive(!active)\n  }\n\n  const customButton = {\n    display: \"none\"\n  }\n\n  return (\n    <Fragment>\n      <div className = \"container\">\n        <h2>With close button only (showClose = true)</h2>\n        <button onClick = {() => setActive(true)}>Open</button>\n        <Modal\n            close = {close}\n            escape = {false}\n            open = {active}\n            outside = {false}\n            showClose = {true}\n            styleButton = {customButton}\n        />\n      </div>\n    </Fragment>\n  )\n});\n\nstories.add(\"Ex3\", () => {\n  const [active, setActive] = useState(false)\n\n  const close = () => {\n    setActive(!active)\n  }\n\n  const customContent = {\n    background: \"#212E53\",\n    color: \"#FFF\",\n    borderRadius: \"0\"\n  }\n\n  const customButton = {\n    fontSize: \"1rem\",\n    cursor: \"pointer\",\n    fontWeight: \"bold\",\n    background: \"#EBACA2\",\n    \n    width: \"12rem\",\n    padding: \"1rem\",\n    borderRadius: \".3rem\"\n  }\n\n  return (\n    <Fragment>\n      <div className = \"container\">\n        <h1>React Modal</h1>\n        <h2>Modal customized</h2>\n        <button onClick = {() => setActive(true)}>Open</button>\n        <Modal\n            buttonContent = \"Example button\"\n            close = {close}\n            modalContent = \"Example 3\"\n            open = {active}\n            styleButton = {customButton}\n            styleContent = {customContent}\n        />\n      </div>\n    </Fragment>\n\n  )\n});"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;AAEA;AASA;AAQA;AAAA;AACA;AAAA;AAGA;AAWA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AASA;AAAA;AAGA;AAgBA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAFA;AAAA;AAMA;AAAA;AAAA;AAAA;AAbA;AANA;AAuBA;AACA;AA7CA;AA8CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAJA;AADA;AAaA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAHA;AADA;AAeA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AARA;AAWA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAJA;AADA;AAiBA;;;;;A","sourceRoot":""}